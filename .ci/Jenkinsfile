pipeline {
	agent {
        docker {
            image 'jenkins-docker-agent:1'
            args '-v /var/run/docker.sock:/var/run/docker.sock -v /tmp/giver.keys.json:/tmp/giver.keys.json --group-add docker'
        }  
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'dev', name: 'BRANCH', type: 'PT_BRANCH', quickFilterEnabled: true
        booleanParam name: 'RELEASE', defaultValue: false, description: 'If true will create Github Release, upload artifacts and push Docker images!'
    }

    stages {
        stage('Clone repository') {
            steps {
                git branch: "${params.BRANCH}", url: 'https://github.com/gosh-sh/gosh.git'
                checkout scm
                script {
                    env.VERSION = sh script: "cat version.json | jq .version | tr -d '\"\n'", returnStdout: true
                    currentBuild.displayName = "#${BUILD_NUMBER}_${BRANCH}_v${VERSION}"
                }
            }
        }   

        stage('Compile') { 
            stages {
                stage("Compile: SMV") {
                    steps {
                        script {
                            dir ('contracts/smv') {
                                sh 'make build-contracts'
                            }
                        }
                    }
                }
                stage("Compile: GOSH") {
                    steps {
                        script {
                            dir ('contracts/gosh') {
                                sh 'make build-contracts'
                            }
                        }
                    }
                }
            }
        }
        stage('Build & Deploy') {
            parallel {
                stage('Build') { 
                    stages {
                        stage("Build: Git Helper") {
                            steps {
                                script {
                                    dir ('git-remote-gosh') {
                                        sh "make bench FULL_IMAGE_NAME=teamgosh/git:${VERSION} PLATFORM=linux/amd64,linux/arm64"
                                    }
                                }
                            }
                        }
                        stage("Publish: Git Helper - Docker") {
                            steps {
                                script {
                                    dir ('git-remote-gosh') {
                                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'teamgosh-dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                                            sh 'docker login -u $USERNAME -p $PASSWORD'
                                        }
                                        sh "make publish FULL_IMAGE_NAME=teamgosh/git:${VERSION} PLATFORM=linux/amd64,linux/arm64"
                                    }
                                }
                            }   
                        }
                        stage("Build: Docker Extension") {
                            steps {
                                script {
                                    dir ('docker-extension') {
                                        sh "make build-ci IMAGE=teamgosh/docker-extension TAG=${VERSION} GOSH_GIT_IMAGE=teamgosh/git:${VERSION}"
                                    }
                                }
                            }
                        }
                    }
                }

                stage("Deploy: smart-contracts") {
                    steps {
                        script {
                            dir ('contracts/gosh') {
                                sh 'make prepare-docker && make deploy-docker KEYS_PATH=/tmp/giver.keys.json NETWORK=vps23.ton.dev GIVER_WALLET_ADDR=0:c6f86566776529edc1fcf3bc444c2deb9f3e077f35e49871eb4d775dd0b04391'
                            }
                        }
                        archiveArtifacts artifacts: "contracts/gosh/gosh.seed"
                        archiveArtifacts artifacts: "contracts/gosh/GoshRoot.addr"
                    }
                }
            }
        }

        stage("Deploy: web") {
            steps {
                script {
                    dir ('web') {
                        env.REACT_APP_GOSH_ADDR = sh script: "cat contracts/gosh/GoshRoot.addr | tr -d '\n'", returnStdout: true
                        sh "sed -i '/REACT_APP_GOSH_ADDR/s/\$/${REACT_APP_GOSH_ADDR}/' .env.ci"
                        sh 'make run ENV=ci '
                    }
                }
            }
        }

        stage('Publish') { 
            stages {
                stage("Publish: Git Helper - bin") {
                    steps {
                        script {
                            dir ('git-remote-gosh') {
                                sh "make bench FULL_IMAGE_NAME=teamgosh/git:${VERSION} DOCKER_BUILDX_ARGS='--output type=local,dest=./' PLATFORM=linux/amd64,linux/arm64"
                                sh "cp linux_amd64/usr/local/bin/git-remote-gosh ./git-remote-gosh-amd64"
                                sh "cp linux_arm64/usr/local/bin/git-remote-gosh ./git-remote-gosh-arm64"
                            }
                            archiveArtifacts artifacts: "git-remote-gosh/git-remote-gosh-amd64"
                            archiveArtifacts artifacts: "git-remote-gosh/git-remote-gosh-arm64"
                            if (params.RELEASE) {
                                dir ('.ci/scripts') {
                                    withCredentials([string(credentialsId: 'github-gosh-release', variable: 'TOKEN')]) {
                                        sh "./create-github-release.sh $TOKEN ${VERSION} ${BRANCH}"
                                        sh "./github-upload-assets.sh $TOKEN ${VERSION} ../../git-remote-gosh/git-remote-gosh-amd64"
                                        sh "./github-upload-assets.sh $TOKEN ${VERSION} ../../git-remote-gosh/git-remote-gosh-arm64"
                                    }
                                }
                            }
                        }
                    }   
                }
                stage("Publish: Docker Extension") {
                    steps {
                        script {
                            if (params.RELEASE) {
                                dir ('docker-extension') {
                                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'teamgosh-dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                                        sh 'docker login -u $USERNAME -p $PASSWORD'
                                    }
                                    sh "make publish IMAGE=teamgosh/docker-extension TAG=${VERSION} GOSH_GIT_IMAGE=teamgosh/git:${VERSION}"
                                }
                            }
                        }
                    }
                }
            }
        }  
    }
    post { 
        always { 
            cleanWs()
            sh 'docker rm -f gosh-web'
        }
    }
}