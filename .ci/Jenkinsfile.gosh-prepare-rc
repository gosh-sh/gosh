pipeline {
    agent {
        docker {
            image 'jenkins-docker-agent:1'
            args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt/giver.keys.json:/opt/giver.keys.json --group-add docker'
        }
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'dev', name: 'BRANCH', type: 'PT_BRANCH', quickFilterEnabled: true
        booleanParam name: 'DRYRUN', defaultValue: true, description: 'Disable if you want to create and publish pre-release artifacts.'
    }

    stages {
        stage('Clone repository') {
            steps {
                git branch: "${params.BRANCH}", url: 'https://github.com/gosh-sh/gosh.git'
                checkout scm
                script {
                    env.VERSION = sh script: "cat version.json | jq .version | tr -d '\"\n'", returnStdout: true
                    currentBuild.displayName = "#${BUILD_NUMBER}_${BRANCH}_${VERSION}"
                }
            }
        }
        stage('Compile: SMV') {
            steps {
                script {
                    dir('contracts/smv') {
                        sh 'make build-contracts'
                    }
                }
            }
        }
        stage('Compile: GOSH') {
            steps {
                script {
                    dir('contracts/gosh') {
                        sh 'make build-contracts'
                    }
                }
            }
        }
        stage('Build: Git Helper') {
            steps {
                retry(3) {
                    script {
                        dir('git-remote-gosh') {
                            sh "make bench FULL_IMAGE_NAME=localhost:5000/teamgosh/git:${VERSION} PLATFORM=linux/amd64,linux/arm64 DOCKER_BUILDER_ARGS='--driver-opt network=host'"
                            sh "make bench FULL_IMAGE_NAME=localhost:5000/teamgosh/git:${VERSION} DOCKER_BUILDX_ARGS='--output type=local,dest=./' PLATFORM=linux/amd64,linux/arm64"
                            sh "make publish FULL_IMAGE_NAME=localhost:5000/teamgosh/git:${VERSION} PLATFORM=linux/amd64,linux/arm64"
                            sh 'cp linux_amd64/usr/local/bin/git-remote-gosh ./git-remote-gosh-amd64'
                            sh 'cp linux_arm64/usr/local/bin/git-remote-gosh ./git-remote-gosh-arm64'
                        }
                    }
                }
            }
        }
        stage('Build: Docker Extension') {
            steps {
                script {
                    dir('docker-extension') {
                        sh "make build-ci IMAGE=localhost:5000/teamgosh/docker-extension TAG=${VERSION} PLATFORM=linux/amd64,linux/arm64 GOSH_GIT_IMAGE=localhost:5000/teamgosh/git:${VERSION}"
                    }
                }
            }
        }
        stage('Tests: deploy smart-contracts') {
            steps {
                script {
                    dir('contracts/gosh') {
                        sh 'make prepare-docker && make deploy-docker KEYS_PATH=/opt/giver.keys.json NETWORK=vps23.ton.dev GIVER_WALLET_ADDR=0:c6f86566776529edc1fcf3bc444c2deb9f3e077f35e49871eb4d775dd0b04391'
                    }
                }
                archiveArtifacts artifacts: 'contracts/gosh/gosh.seed'
                archiveArtifacts artifacts: 'contracts/gosh/GoshRoot.addr'
                archiveArtifacts artifacts: 'contracts/gosh/GoshDaoCreator.addr'
            }
        }

        stage('Tests: functional') {
            steps {
                script {
                    dir('tests') {
                        sh 'mkdir /home/jenkins/bin && cp -r ../git-remote-gosh/git-remote-gosh-amd64 /home/jenkins/bin/git-remote-gosh && chmod +x /home/jenkins/bin/git-remote-gosh'
                        sh 'PATH=/home/jenkins/bin:$PATH && ./it-01.sh'
                    }
                }
            }
        }

        stage('Tests: deploy web') {
            steps {
                script {
                    dir('web') {
                        env.REACT_APP_GOSH_ADDR = sh script: "cat contracts/gosh/GoshRoot.addr | tr -d '\n'", returnStdout: true
                        env.REACT_APP_CREATOR_ADDR = sh script: "cat contracts/gosh/GoshDaoCreator.addr | tr -d '\n'", returnStdout: true
                        sh "sed -i '/REACT_APP_GOSH_ADDR/s/\$/${REACT_APP_GOSH_ADDR}/' .env.ci"
                        sh "sed -i '/REACT_APP_CREATOR_ADDR/s/\$/${REACT_APP_CREATOR_ADDR}/' .env.ci"
                        sh 'make run ENV=ci '
                    }
                }
            }
        }
        stage('Prerelease: Git Helper - bin') {
            steps {
                script {
                    archiveArtifacts artifacts: 'git-remote-gosh/git-remote-gosh-amd64'
                    archiveArtifacts artifacts: 'git-remote-gosh/git-remote-gosh-arm64'
                    if (!params.DRYRUN) {
                        dir('.ci/scripts') {
                            withCredentials([string(credentialsId: 'github-gosh-release', variable: 'TOKEN')]) {
                                sh './create-github-release.sh $TOKEN ${VERSION} ${BRANCH}'
                                sh './github-upload-assets.sh $TOKEN ${VERSION} ../../git-remote-gosh/git-remote-gosh-amd64'
                                sh './github-upload-assets.sh $TOKEN ${VERSION} ../../git-remote-gosh/git-remote-gosh-arm64'
                            }
                        }
                    }
                }
            }
        }
        stage('Prerelease: push rc Git Helper Docker image') {
            steps {
                retry(3) {
                    script {
                        if (!params.DRYRUN) {
                            dir('git-remote-gosh') {
                                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'teamgosh-dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                                    sh 'docker login -u $USERNAME -p $PASSWORD'
                                }
                                sh "make publish FULL_IMAGE_NAME=teamgosh/git:rc-${VERSION} PLATFORM=linux/amd64,linux/arm64"
                            }
                        }
                    }
                }
            }
        }
        stage('Prerelease: push rc Docker Extension image') {
            steps {
                retry(3) {
                    script {
                        if (!params.DRYRUN) {
                            dir('docker-extension') {
                                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'teamgosh-dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                                    sh 'docker login -u $USERNAME -p $PASSWORD'
                                }
                                sh "make build-ci IMAGE=teamgosh/docker-extension TAG=rc-${VERSION} PLATFORM=linux/amd64,linux/arm64 GOSH_GIT_IMAGE=localhost:5000/teamgosh/git:${VERSION}"
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
            sh 'docker rm -f gosh-web'
        }
    }
}
