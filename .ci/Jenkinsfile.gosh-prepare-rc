pipeline {
    agent none
    //triggers {
    //    cron('30 23 * * *') //run at 23:31:00 
    //}
    options {
        timestamps ()
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'dev', name: 'sha1', type: 'PT_BRANCH', quickFilterEnabled: true
        booleanParam name: 'DRYRUN', defaultValue: true, description: 'If enabled, will NOT publish pre-release artifacts to Github and Dockerhub.'
    }

    stages {
        stage('Clone repository') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    if (env.ghprbPullLink) {
                        env.COMMIT = env.ghprbSourceBranch
                    } else {
                        env.COMMIT = params.sha1
                    }
                }
                echo "${COMMIT}"
                git branch: "${COMMIT}", url: 'https://github.com/gosh-sh/gosh.git'
                checkout scm
                script {
                    env.VERSION = sh script: "cat version.json | jq .version | tr -d '\"\n'", returnStdout: true
                    currentBuild.displayName = "${BUILD_NUMBER}_${COMMIT}_${VERSION}"
                }
            }
        }
        stage('Build: Git Helper') {
            agent {
                node {
                    label 'jenkins-main'
                }
            }
            steps {
                script {
                    dir('v2_x/git-remote-gosh') {
                        sh '''
                            #!/bin/bash
                            set -ex
                            
                            # 2 = gosh-dispatcher
                            PIPELINE_2_ID=$(az pipelines build queue --definition-id 2 --branch \${COMMIT} --project gosh | jq .id)
                            PIPELINE_2_STATUS=inProgress

                            # 1 = git-remote-gosh
                            PIPELINE_1_ID=$(az pipelines build queue --definition-id 1 --branch \${COMMIT} --project gosh | jq .id)
                            PIPELINE_1_STATUS=inProgress

                            until [ $PIPELINE_2_STATUS != "inProgress" ]
                            do
                                sleep 60
                                PIPELINE_2_STATUS=$(az pipelines build show --project gosh --id $PIPELINE_2_ID | jq .status | tr -d '\"')
                            done
                            until [ $PIPELINE_1_STATUS != "inProgress" ]
                            do
                                sleep 60
                                PIPELINE_1_STATUS=$(az pipelines build show --project gosh --id $PIPELINE_1_ID | jq .status | tr -d '\"')
                            done

                            rm -rf ./linux-*
                            rm -rf ./darwin-*
                            rm -rf ./windows-*

                            az pipelines runs artifact download --project gosh --artifact-name linux-amd64 --run-id $PIPELINE_1_ID --path ./linux-amd64
                            az pipelines runs artifact download --project gosh --artifact-name darwin-amd64 --run-id $PIPELINE_1_ID --path ./darwin-amd64
                            az pipelines runs artifact download --project gosh --artifact-name windows-amd64 --run-id $PIPELINE_1_ID --path ./windows-amd64
                            az pipelines runs artifact download --project gosh --artifact-name linux-arm64 --run-id $PIPELINE_1_ID --path ./linux-arm64
                            az pipelines runs artifact download --project gosh --artifact-name darwin-arm64 --run-id $PIPELINE_1_ID --path ./darwin-arm64

                            az pipelines runs artifact download --project gosh --artifact-name linux-amd64 --run-id $PIPELINE_2_ID --path ./linux-amd64
                            az pipelines runs artifact download --project gosh --artifact-name darwin-amd64 --run-id $PIPELINE_2_ID --path ./darwin-amd64
                            az pipelines runs artifact download --project gosh --artifact-name windows-amd64 --run-id $PIPELINE_2_ID --path ./windows-amd64
                            az pipelines runs artifact download --project gosh --artifact-name linux-arm64 --run-id $PIPELINE_2_ID --path ./linux-arm64
                            az pipelines runs artifact download --project gosh --artifact-name darwin-arm64 --run-id $PIPELINE_2_ID --path ./darwin-arm64

                            tar -cvf git-remote-gosh-linux-amd64.tar -C linux-amd64 $(ls -A linux-amd64)
                            tar -cvf git-remote-gosh-darwin-amd64.tar -C darwin-amd64 $(ls -A darwin-amd64)
                            tar -cvf git-remote-gosh-linux-arm64.tar -C linux-arm64 $(ls -A linux-arm64)
                            tar -cvf git-remote-gosh-darwin-arm64.tar -C darwin-arm64 $(ls -A darwin-arm64)  
                            cd windows-amd64 && zip -r git-remote-gosh-windows-amd64.zip ./* && cp git-remote-gosh-windows-amd64.zip ../
                        '''
                    }
                }
            }
        }
        /*stage('Build: Docker Extension') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    dir('docker-extension') {
                        sh "make push IMAGE=localhost:5000/teamgosh/docker-extension TAG=${VERSION} PLATFORM=linux/amd64,linux/arm64 GOSH_GIT_IMAGE=localhost:5000/teamgosh/git:${VERSION}"
                    }
                }
            }
        }*/
        stage('Deploy: deploy smart-contracts') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker --network docker-network-for-se'
                }
            }
            steps {
                script {
                    dir('v2_x/contracts/multisig') {
                        // Deploy msig giver for GOSH deployment
                        sh 'make build-contracts-docker'
                        sh 'make generate-docker NETWORK=https://local-evernode.gosh.sh'
                        sh '''
                            tonos-cli -u https://local-evernode.gosh.sh call 0:ece57bcc6c530283becbbd8a3b24d3c5987cdddc3c8b7b33be6e4a6312490415 sendTransaction "{\\"dest\\": \\"$(cat Giver.addr)\\", \\"value\\": 5000000000000000, \\"bounce\\": false}" --abi GiverV2.abi.json --sign GiverV2.keys.json
                        '''
                        sh 'make deploy-docker EXTRA_DOCKER_ARGS="--network docker-network-for-se"'
                    }
                    dir('v2_x/contracts/gosh') {
                        sh 'make prepare-docker && make deploy-docker EXTRA_DOCKER_ARGS="--network docker-network-for-se"'
                    }
                    env.REACT_APP_GOSH_ROOTADDR = sh script: "cat v2_x/contracts/gosh/VersionController.addr | tr -d '\n'", returnStdout: true
                    env.REACT_APP_GOSH = sh script: "cat v2_x/contracts/gosh/SystemContract.addr | tr -d '\n'", returnStdout: true
                }
                archiveArtifacts artifacts: 'v2_x/contracts/gosh/*.seed'
                archiveArtifacts artifacts: 'v2_x/contracts/gosh/*.addr'
            }
        }
        stage('Web: deploy') {
            agent {
                node {
                    label 'jenkins-main'
                }
            }
            steps {
                script {
                    env.BUCKET_NAME = "app-" + "${COMMIT}_${VERSION}".replaceAll("[^a-zA-Z0-9 ]+","-")
                    sh """
                        sed -i '/REACT_APP_GOSH_ROOTADDR =/s/\$/${REACT_APP_GOSH_ROOTADDR}/' web/.env.ci
                        sed -i '/REACT_APP_GOSH =/s/\$/{"1.0.0": "${REACT_APP_GOSH}"}/' web/.env.ci
                        cat web/.env.ci
                    """
                    dir('web') {     
                        sh "make build ENV=ci REACT_APP_ISDOCKEREXT=false"
                        def status = sh(script: "aws s3api head-bucket --bucket ${BUCKET_NAME}", returnStatus: true)
                        if (status == 0) {
                            echo 'Bucket already exists. Just syncing.'
                            sh "aws s3 sync build/ s3://${BUCKET_NAME}"
                        } else {
                            sh """      
                                aws s3api create-bucket --bucket ${BUCKET_NAME} --region eu-west-2 --acl public-read --create-bucket-configuration LocationConstraint=eu-west-2
                                aws s3 website s3://${BUCKET_NAME} --index-document index.html --error-document index.html
                                sed 's/BUCKET_NAME/${BUCKET_NAME}/g' ../.ci/s3/policy.json.template > policy.json
                                aws s3api put-bucket-policy --bucket ${BUCKET_NAME} --policy file://policy.json
                                aws s3 sync build/ s3://${BUCKET_NAME}
                                sed "s/BUCKET_NAME/\$BUCKET_NAME/g" ../.ci/nginx/proxy.s3.conf.template >> /opt/nginx/s3-proxy.conf
                                docker restart nginx-test-app-gosh-sh
                            """  
                        }
                    }   
                }
            }
        }
        stage('Web: wait to be available') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    timeout(15) {
                        waitUntil {
                            def r = sh script: "sleep 10 && curl -s --retry-connrefused --retry 100 --retry-delay 5 https://${BUCKET_NAME}.gosh.sh > /dev/null", returnStatus: true
                            return r == 0
                        }  
                    }
                }
            }
        }
        stage('Tests: functional') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker -v /root/jenkins-main/workspace:/tmp'
                }
            }
            steps {
                script {
                    dir('tests') {
                        sh '''
                            #!/bin/bash
                            set -e
                            set -x

                            rm -rf ../v2_x/git-remote-gosh/linux-amd64

                            cp -r /tmp/${JOB_NAME}/v2_x/git-remote-gosh/git-remote-gosh* ../v2_x/git-remote-gosh
                            cp -r /tmp/${JOB_NAME}/v2_x/git-remote-gosh/linux-amd64 ../v2_x/git-remote-gosh/

                            mkdir /home/jenkins/bin

                            # dispatcher
                            cp -r ../v2_x/git-remote-gosh/linux-amd64/git-remote-gosh /home/jenkins/bin/git-remote-gosh && chmod +x /home/jenkins/bin/git-remote-gosh

                            # remote
                            cd ../v2_x/git-remote-gosh/linux-amd64
                            ls -la
                            REMOTE_VERSION=\$(find . -name "git-remote-gosh_v*" | tr -d "./")
                            cd -
                            cp -r ../v2_x/git-remote-gosh/linux-amd64/$REMOTE_VERSION /home/jenkins/bin/$REMOTE_VERSION && chmod +x /home/jenkins/bin/$REMOTE_VERSION
                            mkdir -p /home/jenkins/.gosh/
                            echo $REMOTE_VERSION > /home/jenkins/.gosh/dispatcher.ini
                            export PATH=/home/jenkins/.everdev/tonos-cli/:/home/jenkins/bin:$PATH
                            #./set-vars.sh https://local-evernode.gosh.sh
                            ./test_all.sh https://local-evernode.gosh.sh

                        '''
                        /* def files = sh(script: 'ls *.test.sh | grep "[0-9][0-9]-\\+"', returnStdout: true).trim().split('\n')
                        runParallel items: (files).collect { "${it}" } */
                    }
                }
                archiveArtifacts artifacts: 'tests/*.seed'
            }
        }
        stage('Tests: Web') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    dir('monitoring/gosh-mon') {   
                        sh "cp config/credentials.yml.template config/credentials.yml"
                        sh "docker build -t gosh-mon ."
                        def tests = webTestsList()
                        for (int i = 0; i < tests.length; i++) {
                            stage("Test ${tests[i]}") {
                                sh """
                                    mkdir -p test-errors/${tests[i].trim()}
                                    docker run --rm \
                                        -e GM_MODE='${tests[i].trim()}' \
                                        -e RUN_NOW=1 \
                                        -e CONFIG_SEED="\$(cat ../../tests/user.seed)" \
                                        -e CONFIG_APPURL=https://${BUCKET_NAME}.gosh.sh/ \
                                        -e CONFIG_REDIS_HOST="" \
                                        -e CONFIG_USERNAME=user1 \
                                        -v \$(pwd)/config:/home/node/app/config:ro \
                                        -v \$(pwd)/test-errors:/home/node/app/errors \
                                        gosh-mon
                                """
                            }
                        }
                    }
                }
            }
            post {
                failure {
                    archiveArtifacts artifacts: "monitoring/gosh-mon/test-errors/*.log"
                    archiveArtifacts artifacts: "monitoring/gosh-mon/test-errors/*.png"
                }
            }
        }
        /*stage("Prerelease: Git Helper Snap"){
            agent {
                node {
                    label 'jenkins-main'
                }
            }
            steps {
                script {
                    if (!params.ONLYWEB && !params.DRYRUN) {
                        dir('v2_x/git-remote-gosh') {
                        sh """
                            cp /var/jenkins_home/workspace/gosh-prepare-rc/git-remote-gosh/git-remote-gosh-amd64 snap/git-remote-gosh
                            sed -i 's/VERSION_PLACEHOLDER/${VERSION}/g' snap/snapcraft.yaml
                            chmod +x snap/git-remote-gosh
                            cd snap
                            tar -cvf git-remote-gosh.tar git-remote-gosh
                            snapcraft clean --use-lxd
                            snapcraft --use-lxd
                            snapcraft upload git-remote-gosh_${VERSION}_amd64.snap --release=candidate
                        """
                        }
                    }
                }
            }
        }*/
        stage('Prerelease: Git Helper - bin') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    if (!params.DRYRUN) {
                        dir('.ci/scripts') {
                            withCredentials([string(credentialsId: 'github-gosh-release', variable: 'TOKEN')]) {
                                sh './create-github-release.sh $TOKEN ${VERSION} ${COMMIT}'
                                sh './github-upload-assets.sh $TOKEN ${VERSION} ../../v2_x/git-remote-gosh/git-remote-gosh-linux-amd64.tar'
                                sh './github-upload-assets.sh $TOKEN ${VERSION} ../../v2_x/git-remote-gosh/git-remote-gosh-darwin-amd64.tar'
                                sh './github-upload-assets.sh $TOKEN ${VERSION} ../../v2_x/git-remote-gosh/git-remote-gosh-linux-arm64.tar'
                                sh './github-upload-assets.sh $TOKEN ${VERSION} ../../v2_x/git-remote-gosh/git-remote-gosh-darwin-arm64.tar'
                                sh './github-upload-assets.sh $TOKEN ${VERSION} ../../v2_x/git-remote-gosh/git-remote-gosh-windows-amd64.zip'
                            }
                        }
                    }
                }
            }
        }

        stage('Prerelease: push rc Docker Extension image') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                retry(3) {
                    script {
                        if (!params.DRYRUN) {
                            dir('docker-extension') {
                                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'teamgosh-dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                                    sh 'docker login -u $USERNAME -p $PASSWORD'
                                }
                                sh "make push IMAGE=teamgosh/docker-extension TAG=rc-${VERSION} PLATFORM=linux/amd64,linux/arm64"
                            }
                        }
                    }
                }
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
    }
}

def runParallel(args) {
  parallel args.items.collectEntries { name -> [ "${name}": {
    stage("${name}") {
        sh """
            export PATH=/home/jenkins/.everdev/tonos-cli/:/home/jenkins/bin:$PATH
            . ./env.env
            ./${name}
        """
    }
  }]}
}

def webTestsList() {
  return "app-setup,app-small-write,app-small-read,app-large-write,app-large-read".split(",")
}