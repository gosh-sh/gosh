def runFunctionSet(function_name) {
    running_set = [
        "v1_x": {
            "${function_name}"('v1_x')
        },
        "v2_x": {
            "${function_name}"('v2_x')
        },
        "v3_x": {
            "${function_name}"('v3_x')
        },
        "v4_x": {
            "${function_name}"('v4_x')
        }
    ]
    parallel(running_set)
}

pipeline {
    agent none
    //triggers {
    //    cron('30 23 * * *') //run at 23:31:00 
    //}
    options {
        timestamps ()
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'dev', name: 'sha1', type: 'PT_BRANCH', quickFilterEnabled: true
        booleanParam name: 'DRYRUN', defaultValue: true, description: 'If enabled, will NOT publish pre-release artifacts to Github and Dockerhub.'
    }

    stages {
        stage('Clone repository') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    if (env.ghprbPullLink) {
                        env.COMMIT = env.ghprbSourceBranch
                    } else {
                        env.COMMIT = params.sha1
                    }
                    sh "docker ps -a --filter name=localnode-* -aq | xargs docker rm -f || true"
                }
                echo "${COMMIT}"
                git branch: "${COMMIT}", url: 'https://github.com/gosh-sh/gosh.git'
                checkout scm
                script {
                    env.APP_VERSION = sh script: "cat version.json | jq .version | tr -d '\"\n'", returnStdout: true
                    currentBuild.displayName = "${BUILD_NUMBER}_${COMMIT}_${APP_VERSION}"
                }
            }
        }
        stage('Build: Dispatcher') {
            agent {
                node {
                    label 'jenkins-main'
                }
            }
            steps {
                buildDispatcher()
                //buildDispatcherDebug()
            }
        }
        stage('Build: Git Helper') {
            agent {
                node {
                    label 'jenkins-main'
                }
            }
            steps {
                runFunctionSet('buildRemoteGosh')
                //runFunctionSet('buildRemoteGoshDebug')
            }
        }

        stage('Build: Prepare archives') {
            agent {
                node {
                    label 'jenkins-main'
                }
            }
            steps {
                archiveAzureArtifacts()
            }
        }

        /*stage('Tests') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker --network host -v /root/jenkins-main/workspace:/tmp --add-host localnode:127.0.0.1'
                }
            }
            steps {
                script {
                    sh "rm -rf tests_workspace_*"
                    def basePort = 9000
                    def files = getTestFiles("tests")
                    def nodes = getNodesCount()
                    def versions = ["v1_x", "v2_x", "v3_x", "v4_x"]
                    
                    for (version in versions) {
                        sh "rm -rf ${version}_workspace_*"
                        deployVersion(version, nodes, basePort)
                    }

                    runFunctionalTests(files, basePort, "Func v1", "v1_x")
                    runFunctionalTests(files, basePort, "Func v2", "v2_x")
                    runFunctionalTests(files, basePort, "Func v3", "v3_x")
                    runFunctionalTests(files, basePort, "Func v4", "v4_x")

                    def upgradeFiles = getTestFiles("tests/upgrade_tests")
                    //runUpgradeTests(upgradeFiles, basePort, 1, 4)
                    //runUpgradeTests(upgradeFiles, basePort, 2, 4)
                    //runUpgradeTests(upgradeFiles, basePort, 3, 4)
                    env.REACT_APP_GOSH_ROOTADDR = sh script: "cat v1_x_workspace_0/contracts/gosh/VersionController.addr | tr -d '\n'", returnStdout: true
                    env.REACT_APP_GOSH = sh script: "cat v1_x_workspace_0/contracts/gosh/SystemContract.addr | tr -d '\n'", returnStdout: true
                }
            }
        }

        stage('Web: deploy') {
            agent {
                node {
                    label 'jenkins-main'
                }
            }
            steps {
                deployWeb()
            }
        }
        
        stage('Tests: Web') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker --network host --add-host localnode:127.0.0.1'
                }
            }
            steps {
                testWeb()
            }
            post {
                failure {
                    archiveArtifacts artifacts: "monitoring/gosh-mon/test-errors/*.log"
                    archiveArtifacts artifacts: "monitoring/gosh-mon/test-errors/*.png"
                }
            }
        }*/

        stage('Prerelease: Git Helper - bin') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker -v /root/jenkins-main/workspace:/tmp'
                }
            }
            steps {
                prereleaseBinaries()
            }
        }

        stage('Prerelease: push rc Docker Extension image') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                retry(3) {
                    prereleaseDockerExtension()
                }
            }
        }
    }
    post { 
        always { 
            node('jenkins-main') { 
                cleanWs()
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////FUNCTIONS//////////////////////////////////

// BUILD
def buildDispatcher() {
    script {
        dir('gosh-dispatcher') {
            sh '''
                #!/bin/bash
                set -ex
                
                # 2 = gosh-dispatcher
                PIPELINE_2_ID=$(az pipelines build queue --definition-id 2 --branch \${COMMIT} --project gosh | jq .id)
                PIPELINE_2_STATUS=inProgress

                until [ \$PIPELINE_2_STATUS = "completed" ]
                do
                    sleep 60
                    PIPELINE_2_STATUS=$(az pipelines build show --project gosh --id $PIPELINE_2_ID | jq .status | tr -d '\"')
                done

                cd ${WORKSPACE}
                rm -rf linux-*
                rm -rf darwin-*
                rm -rf windows-*

                az pipelines runs artifact download --project gosh --artifact-name linux-amd64 --run-id $PIPELINE_2_ID --path linux-amd64
                az pipelines runs artifact download --project gosh --artifact-name darwin-amd64 --run-id $PIPELINE_2_ID --path darwin-amd64
                az pipelines runs artifact download --project gosh --artifact-name windows-amd64 --run-id $PIPELINE_2_ID --path windows-amd64
                az pipelines runs artifact download --project gosh --artifact-name linux-arm64 --run-id $PIPELINE_2_ID --path linux-arm64
                az pipelines runs artifact download --project gosh --artifact-name darwin-arm64 --run-id $PIPELINE_2_ID --path darwin-arm64
            '''
        }
    }
}

def buildDispatcherDebug() {
    script {
        dir('gosh-dispatcher') {
            sh '''
                #!/bin/bash
                set -ex

                cd ${WORKSPACE}
                rm -rf linux-*
                rm -rf darwin-*
                rm -rf windows-*

                az pipelines runs artifact download --project gosh --artifact-name linux-amd64 --run-id 790 --path linux-amd64
                az pipelines runs artifact download --project gosh --artifact-name darwin-amd64 --run-id 790 --path darwin-amd64
                az pipelines runs artifact download --project gosh --artifact-name windows-amd64 --run-id 790 --path windows-amd64
                az pipelines runs artifact download --project gosh --artifact-name linux-arm64 --run-id 790 --path linux-arm64
                az pipelines runs artifact download --project gosh --artifact-name darwin-arm64 --run-id 790 --path darwin-arm64
            '''
        }
    }
}

def buildRemoteGosh(version) {
    script {
        dir("${version}/git-remote-gosh") {
            sh """
                #!/bin/bash
                set -ex

                ### need to be executed once for each new variable
                ### az pipelines variable create --name version --pipeline-id 1 --project gosh --allow-override true

                # 1 = git-remote-gosh
                PIPELINE_1_ID=\$(az pipelines build queue --definition-id 1 --branch ${COMMIT} --project gosh --variables versionNo=${version} | jq .id)
                PIPELINE_1_STATUS=inProgress

                until [ \$PIPELINE_1_STATUS = "completed" ]
                do
                    sleep 60
                    PIPELINE_1_STATUS=\$(az pipelines build show --project gosh --id \$PIPELINE_1_ID | jq .status | tr -d '\"')
                done

                cd ${WORKSPACE}

                az pipelines runs artifact download --project gosh --artifact-name linux-amd64 --run-id \$PIPELINE_1_ID --path linux-amd64
                az pipelines runs artifact download --project gosh --artifact-name darwin-amd64 --run-id \$PIPELINE_1_ID --path darwin-amd64
                az pipelines runs artifact download --project gosh --artifact-name windows-amd64 --run-id \$PIPELINE_1_ID --path windows-amd64
                az pipelines runs artifact download --project gosh --artifact-name linux-arm64 --run-id \$PIPELINE_1_ID --path linux-arm64
                az pipelines runs artifact download --project gosh --artifact-name darwin-arm64 --run-id \$PIPELINE_1_ID --path darwin-arm64
            """
        }
    }
}

def buildRemoteGoshDebug(version) {
    script {
        dir("${version}/git-remote-gosh") {
            sh """
                #!/bin/bash
                set -ex

                cd ${WORKSPACE}
                export VSTS_ARTIFACTTOOL_DISABLE_HARDLINKS=1
                az pipelines runs artifact download --project gosh --artifact-name linux-amd64 --run-id 806 --path linux-amd64
                az pipelines runs artifact download --project gosh --artifact-name darwin-amd64 --run-id 806 --path darwin-amd64
                az pipelines runs artifact download --project gosh --artifact-name windows-amd64 --run-id 806 --path windows-amd64
                az pipelines runs artifact download --project gosh --artifact-name linux-arm64 --run-id 806 --path linux-arm64
                az pipelines runs artifact download --project gosh --artifact-name darwin-arm64 --run-id 806 --path darwin-arm64

                az pipelines runs artifact download --project gosh --artifact-name linux-amd64 --run-id 805 --path linux-amd64
                az pipelines runs artifact download --project gosh --artifact-name darwin-amd64 --run-id 805 --path darwin-amd64
                az pipelines runs artifact download --project gosh --artifact-name windows-amd64 --run-id 805 --path windows-amd64
                az pipelines runs artifact download --project gosh --artifact-name linux-arm64 --run-id 805 --path linux-arm64
                az pipelines runs artifact download --project gosh --artifact-name darwin-arm64 --run-id 805 --path darwin-arm64

                az pipelines runs artifact download --project gosh --artifact-name linux-amd64 --run-id 803 --path linux-amd64
                az pipelines runs artifact download --project gosh --artifact-name darwin-amd64 --run-id 803 --path darwin-amd64
                az pipelines runs artifact download --project gosh --artifact-name windows-amd64 --run-id 803 --path windows-amd64
                az pipelines runs artifact download --project gosh --artifact-name linux-arm64 --run-id 803 --path linux-arm64
                az pipelines runs artifact download --project gosh --artifact-name darwin-arm64 --run-id 803 --path darwin-arm64

                az pipelines runs artifact download --project gosh --artifact-name linux-amd64 --run-id 804 --path linux-amd64
                az pipelines runs artifact download --project gosh --artifact-name darwin-amd64 --run-id 804 --path darwin-amd64
                az pipelines runs artifact download --project gosh --artifact-name windows-amd64 --run-id 804 --path windows-amd64
                az pipelines runs artifact download --project gosh --artifact-name linux-arm64 --run-id 804 --path linux-arm64
                az pipelines runs artifact download --project gosh --artifact-name darwin-arm64 --run-id 804 --path darwin-arm64
            """
        }
    }
}

def archiveAzureArtifacts() {
    script {
        sh '''
            #!/bin/bash
            set -ex

            rm -rf git-remote-gosh-*.tar.gz git-remote-gosh-*.exe
            chmod +x linux-a*/*
            chmod +x darwin-a*/*

            cd linux-amd64
            find . -name \'git-remote-gosh_v*\' | tr -d ./ > dispatcher.ini
            cd -

            cp linux-amd64/dispatcher.ini darwin-amd64
            cp linux-amd64/dispatcher.ini linux-arm64
            cp linux-amd64/dispatcher.ini darwin-arm64
            cp linux-amd64/dispatcher.ini windows-amd64
            tar -czvf git-remote-gosh-linux-amd64.tar.gz -C linux-amd64 $(ls -A linux-amd64)
            tar -czvf git-remote-gosh-darwin-amd64.tar.gz -C darwin-amd64 $(ls -A darwin-amd64)
            tar -czvf git-remote-gosh-linux-arm64.tar.gz -C linux-arm64 $(ls -A linux-arm64)
            tar -czvf git-remote-gosh-darwin-arm64.tar.gz -C darwin-arm64 $(ls -A darwin-arm64)  
            cd windows-amd64 && zip -r git-remote-gosh-windows-amd64.zip ./* && cp git-remote-gosh-windows-amd64.zip ../
        '''
    }
}

// FUNCTIONAL TESTS & DEPLOYS

def getNodesCount() {
    def filesTestsDir = []
    def filesUpgrTestsDir = []

    filesTestsDir = sh(script: 'ls tests/*.test.sh', returnStdout: true).trim().split('\n')
    filesUpgrTestsDir = sh(script: "ls tests/upgrade_tests/*.test.sh", returnStdout: true).trim().split('\n')

    // Compare the number of files in both directories and return the larger array
    if (filesTestsDir.size() > filesUpgrTestsDir.size()) {
        return filesTestsDir
    } else {
        return filesUpgrTestsDir
    }
}

def getTestFiles(testsDir) {
    def files
    dir(testsDir) {
        files = sh(script: 'ls *.test.sh | grep "[0-9][0-9]\\+"', returnStdout: true).trim().split('\n')
    }
    return files
}

def deployVersion(version, files, basePort) {
    def containerStages = [:]

    for (int i = 0; i < files.size(); i++) {
        def port = basePort + i
        def index = i
        containerStages["Deploy ${version} ${i}"] = {
            stage("Deploy ${version} ${index}") {
                deployStage(version, index, port)
            }
        }
    }
    parallel containerStages
}

def deployStage(version, index, port) {
    echo "Checking if Docker container localnode-${port} is already running"
    def containerRunning = sh(returnStdout: true, script: "docker ps --filter name=localnode-${port} --format '{{.Names}}'").trim()

    if (!containerRunning) {
        echo "Starting Docker container on port ${port}"
        sh """
            docker run -d --name localnode-${port} --network test.app.gosh.sh -p ${port}:80 -e USER_AGREEMENT=yes -v ${WORKSPACE}/.ci/blockchain.conf:/ton-node/blockchain.conf.json tonlabs/local-node:0.35.1
        """
    } else {
        echo "Docker container localnode-${port} is already running"
    }

    sh "cp -r ${version} ${version}_workspace_${index}"
    env.version = version
    dir("${WORKSPACE}/${version}_workspace_${index}/contracts/multisig") {
        sh "make generate-docker NETWORK=http://localnode:${port}"
        env.giverAddr = sh(returnStdout: true, script: 'cat Giver.addr').trim()
        sh """
            tonos-cli -u http://localnode:${port} call 0:ece57bcc6c530283becbbd8a3b24d3c5987cdddc3c8b7b33be6e4a6312490415 sendTransaction '{"dest": "${env.giverAddr}", "value": 50000000000000000, "bounce": false}' --abi GiverV2.abi.json --sign GiverV2.keys.json
        """
        sh 'make deploy-docker EXTRA_DOCKER_ARGS="--network host --add-host localnode:127.0.0.1"'
    }
    dir("${WORKSPACE}/${version}_workspace_${index}/contracts/gosh") {
        sh 'make prepare-docker && make deploy-docker EXTRA_DOCKER_ARGS="--network host --add-host localnode:127.0.0.1"'
    }
}

def runFunctionalTests(files, basePort, stagePrefix, version) {
    def containerStages = [:]

    for (int i = 0; i < files.size(); i++) {
        def script = files[i]
        def port = basePort + i
        def index = i
        containerStages["${stagePrefix} ${script}"] = {
            stage("${stagePrefix} ${script}") {
                runSingleFunctionalTest(script, index, port, version)
            }
        }
    }
    parallel containerStages
}

def runSingleFunctionalTest(script, index, port, version) {
    prepareHelperForTests()
    sh "cp -r tests tests_workspace_${index}"
    dir("${WORKSPACE}/tests_workspace_${index}") {
        sh """
            export PATH=/home/jenkins/.everdev/tonos-cli/:/home/jenkins/bin:$PATH
            ./set-vars.sh ${version}_workspace_${index} http://localnode:${port}
            ./${script}
        """
    }
}

def runUpgradeTests(files, basePort, from, to) {
    def containerStages = [:]

    for (int i = 0; i < files.size(); i++) {
        def script = files[i]
        def port = basePort + i
        def index = i
        containerStages["Upgr $from-$to ${script}"] = {
            stage("Upgr ${script}") {
                runSingleUpgradeTest(script, index, port, from, to)
            }
        }
    }
    parallel containerStages
}

def runSingleUpgradeTest(script, index, port, from, to) {
    prepareHelperForTests()
    sh "cp -r tests tests_workspace_${index}"
    dir("${WORKSPACE}/tests_workspace_${index}") {
        sh """
            export PATH=/home/jenkins/.everdev/tonos-cli/:/home/jenkins/bin:$PATH
            ./set-vars.sh v${from}_x_workspace_${index} http://localnode:${port}
            ./upgrade_tests/set_up.sh v${from}_x_workspace_${index} v${to}_x_workspace_${index}
            ./upgrade_tests/${script}
        """
    }
}

def prepareHelperForTests() {
    dir("${WORKSPACE}/tests") {
        sh """
            #!/bin/bash
            set -e
            set -x
            cd ../tests
            mkdir -p /home/jenkins/bin

            # dispatcher
            cp -r /tmp/${JOB_NAME}/linux-amd64/git-remote-gosh /home/jenkins/bin/git-remote-gosh && chmod +x /home/jenkins/bin/git-remote-gosh

            # remote
            cd /tmp/${JOB_NAME}/linux-amd64/
            # REMOTE_VERSION=\$(find . -name "git-remote-gosh_*" | tr -d "./")
            cd -
            cp -r /tmp/${JOB_NAME}/linux-amd64/git-remote-gosh_* /home/jenkins/bin/ && chmod +x /home/jenkins/bin/git-remote-gosh_*
            mkdir -p /home/jenkins/.gosh/
            # echo \$REMOTE_VERSION > /home/jenkins/.gosh/dispatcher.ini
            cd /home/jenkins/bin/
            ls git-remote-gosh_* -1 > /home/jenkins/.gosh/dispatcher.ini
        """
    }
}

// WEB

def deployWeb() {
    script {
        env.BUCKET_NAME = "app-" + "${COMMIT}_${APP_VERSION}".replaceAll("[^a-zA-Z0-9 ]+","-")
        sh """
            sed -i '/REACT_APP_GOSH_ROOTADDR =/s/\$/${REACT_APP_GOSH_ROOTADDR}/' web/.env.ci
            sed -i '/REACT_APP_GOSH =/s/\$/{"1.0.0": "${REACT_APP_GOSH}"}/' web/.env.ci
            cat web/.env.ci
        """
        dir('web') {     
            sh "make build ENV=ci REACT_APP_ISDOCKEREXT=false"
            def status = sh(script: "aws s3api head-bucket --bucket ${BUCKET_NAME}", returnStatus: true)
            if (status == 0) {
                echo 'Bucket already exists. Just syncing.'
                sh "aws s3 sync build/ s3://${BUCKET_NAME}"
            } else {
                sh """      
                    aws s3api create-bucket --bucket ${BUCKET_NAME} --region eu-west-2 --acl public-read --create-bucket-configuration LocationConstraint=eu-west-2
                    aws s3 website s3://${BUCKET_NAME} --index-document index.html --error-document index.html
                    sed 's/BUCKET_NAME/${BUCKET_NAME}/g' ../.ci/s3/policy.json.template > policy.json
                    aws s3api put-bucket-policy --bucket ${BUCKET_NAME} --policy file://policy.json
                    aws s3 sync build/ s3://${BUCKET_NAME}
                    sed "s/BUCKET_NAME/\$BUCKET_NAME/g" ../.ci/nginx/proxy.s3.conf.template >> /opt/nginx/s3-proxy.conf
                    docker restart nginx-test-app-gosh-sh
                """  
            }
        } 
        timeout(15) {
            waitUntil {
                def r = sh script: "sleep 10 && curl -s --retry-connrefused --retry 100 --retry-delay 5 https://${BUCKET_NAME}.gosh.sh > /dev/null", returnStatus: true
                return r == 0
            }  
        } 
    }
}

def testWeb() {
    script {
        dir('monitoring/gosh-mon') {   
            sh "cp config/credentials.yml.template config/credentials.yml"
            sh "docker build --no-cache -t gosh-mon ."
            def tests = webTestsList()
            for (int i = 0; i < tests.length; i++) {
                stage("Test ${tests[i]}") {
                    sh """
                        mkdir -p test-errors/${tests[i].trim()}
                        docker run --rm \
                            -e GM_MODE='${tests[i].trim()}' \
                            -e RUN_NOW=1 \
                            -e CONFIG_SEED="\$(cat ../../tests_workspace_0/user.seed)" \
                            -e CONFIG_APPURL=https://${BUCKET_NAME}.gosh.sh/ \
                            -e CONFIG_REDIS_HOST="" \
                            -e CONFIG_USERNAME=user1 \
                            -v \$(pwd)/config:/home/node/app/config:ro \
                            -v \$(pwd)/test-errors:/home/node/app/errors \
                            --network host --add-host localnode:127.0.0.1 \
                            gosh-mon
                    """
                }
            }
        }
    }
}

// RELEASE

def prereleaseBinaries() {
    script {
        if (!params.DRYRUN) {
            dir('.ci/scripts') {
                withCredentials([string(credentialsId: 'github-gosh-release', variable: 'TOKEN')]) {
                    sh './create-github-release.sh $TOKEN ${APP_VERSION} ${COMMIT}'
                    sh './github-upload-assets.sh $TOKEN ${APP_VERSION} /tmp/${JOB_NAME}/git-remote-gosh-linux-amd64.tar.gz'
                    sh './github-upload-assets.sh $TOKEN ${APP_VERSION} /tmp/${JOB_NAME}/git-remote-gosh-darwin-amd64.tar.gz'
                    sh './github-upload-assets.sh $TOKEN ${APP_VERSION} /tmp/${JOB_NAME}/git-remote-gosh-linux-arm64.tar.gz'
                    sh './github-upload-assets.sh $TOKEN ${APP_VERSION} /tmp/${JOB_NAME}/git-remote-gosh-darwin-arm64.tar.gz'
                    sh './github-upload-assets.sh $TOKEN ${APP_VERSION} /tmp/${JOB_NAME}/git-remote-gosh-windows-amd64.zip'
                }
            }
        }
    }
}

def prereleaseDockerExtension() {
    script {
        if (!params.DRYRUN) {
            dir('docker-extension') {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'teamgosh-dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                    sh 'docker login -u $USERNAME -p $PASSWORD'
                }
                sh "make push IMAGE=teamgosh/docker-extension TAG=rc-${APP_VERSION} PLATFORM=linux/amd64,linux/arm64"
            }
        }
    }
}

def webTestsList() {
  return "app-setup,seed-read,app-small-write,app-small-read,app-large-write,app-large-read".split(",")
}

//////////////////////////////////////////////////////////////////////////////////////////////
////////////DEPRECATED/////////////////////////////////////////
        /*stage('Build: Docker Extension') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    dir('docker-extension') {
                        sh "make push IMAGE=localhost:5000/teamgosh/docker-extension TAG=${APP_VERSION} PLATFORM=linux/amd64,linux/arm64 GOSH_GIT_IMAGE=localhost:5000/teamgosh/git:${APP_VERSION}"
                    }
                }
            }
        }*/




                /*stage("Prerelease: Git Helper Snap"){
            agent {
                node {
                    label 'jenkins-main'
                }
            }
            steps {
                script {
                    if (!params.ONLYWEB && !params.DRYRUN) {
                        dir('v2_x/git-remote-gosh') {
                        sh """
                            cp /var/jenkins_home/workspace/gosh-prepare-rc/git-remote-gosh/git-remote-gosh-amd64 snap/git-remote-gosh
                            sed -i 's/VERSION_PLACEHOLDER/${APP_VERSION}/g' snap/snapcraft.yaml
                            chmod +x snap/git-remote-gosh
                            cd snap
                            tar -czvf git-remote-gosh.tar.gz git-remote-gosh
                            snapcraft clean --use-lxd
                            snapcraft --use-lxd
                            snapcraft upload git-remote-gosh_${APP_VERSION}_amd64.snap --release=candidate
                        """
                        }
                    }
                }
            }
        }*/