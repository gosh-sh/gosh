pipeline {
    agent none
    triggers {
        cron('30 23 * * *') //run at 23:30:00 
    }
    options {
        timestamps ()
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'dev', name: 'BRANCH', type: 'PT_BRANCH', quickFilterEnabled: true
        booleanParam name: 'DRYRUN', defaultValue: true, description: 'If enabled, will NOT publish pre-release artifacts to Github and Dockerhub.'
        booleanParam name: 'ONLYWEB', defaultValue: false, description: 'If enabled, will ONLY deploy contracts and web. Skipping helper and extension build steps.'
    }

    stages {
        stage('Clone repository') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                git branch: "${params.BRANCH}", url: 'https://github.com/gosh-sh/gosh.git'
                checkout scm
                script {
                    env.VERSION = sh script: "cat version.json | jq .version | tr -d '\"\n'", returnStdout: true
                    currentBuild.displayName = "${BUILD_NUMBER}_${BRANCH}_${VERSION}"
                }
            }
        }
        stage('Compile: SMV') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    dir('contracts/smv') {
                        sh 'make build-contracts'
                    }
                }
            }
        }
        stage('Compile: GOSH') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    dir('contracts/gosh') {
                        sh 'make build-contracts'
                    }
                }
            }
        }
        stage('Build: Git Helper') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                retry(3) {
                    script {
                        if (!params.ONLYWEB) {
                            dir('git-remote-gosh') {
                                sh "make prepare-builder DOCKER_BUILDER_ARGS='--driver-opt network=host'"
                                sh "make publish FULL_IMAGE_NAME=localhost:5000/teamgosh/git:${VERSION} PLATFORM=linux/amd64,linux/arm64"
                                sh "make bench FULL_IMAGE_NAME=localhost:5000/teamgosh/git:${VERSION} DOCKER_BUILDX_ARGS='--output type=local,dest=./' PLATFORM=linux/amd64,linux/arm64"
                                sh 'cp linux_amd64/usr/local/bin/git-remote-gosh ./git-remote-gosh-amd64'
                                sh 'cp linux_arm64/usr/local/bin/git-remote-gosh ./git-remote-gosh-arm64'
                            }
                        }
                    }
                }
            }
        }
        stage('Build: Docker Extension') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    if (!params.ONLYWEB) {
                        dir('docker-extension') {
                            sh "make build-ci IMAGE=localhost:5000/teamgosh/docker-extension TAG=${VERSION} PLATFORM=linux/amd64,linux/arm64 GOSH_GIT_IMAGE=localhost:5000/teamgosh/git:${VERSION}"
                        }
                    }
                }
            }
        }
        stage('Deploy: deploy smart-contracts') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    dir('contracts/gosh') {
                        sh 'make prepare-docker && make deploy-docker KEYS_PATH=/opt/giver.keys.json NETWORK=vps23.ton.dev GIVER_WALLET_ADDR=0:c6f86566776529edc1fcf3bc444c2deb9f3e077f35e49871eb4d775dd0b04391'
                    }
                }
                archiveArtifacts artifacts: 'contracts/gosh/gosh.seed'
                archiveArtifacts artifacts: 'contracts/gosh/*.addr'
            }
        }
        stage('Web: deploy') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    env.DOCKER_WEB_CONTAINER_NAME = 'gosh-web-' + currentBuild.displayName.replaceAll("[^a-zA-Z0-9 ]+","-")
                    env.REACT_APP_GOSH_ROOTADDR = sh script: "cat contracts/gosh/SystemContract.addr | tr -d '\n'", returnStdout: true
                    sh """
                        touch ${DOCKER_WEB_CONTAINER_NAME}.gosh.sh
                        sed -i '/REACT_APP_GOSH_ROOTADDR/s/\$/${REACT_APP_GOSH_ROOTADDR}/' web/.env.ci
                        mkdir /opt/${DOCKER_WEB_CONTAINER_NAME} && cp -r web /opt/${DOCKER_WEB_CONTAINER_NAME}/web
                    """
                    dir('web') {     
                        sh """      
                        if [ `docker ps | grep -o "gosh-web.*" | wc -l` -gt 1 ]; then docker ps | grep -o "gosh-web.*" | while read -r line ; do echo \$line ; done | sort | docker rm -f `head -n 1`; fi                                                    
                        make run MOUNT_DIR=/opt/${DOCKER_WEB_CONTAINER_NAME}/web ENV=ci REACT_APP_ISDOCKEREXT=false DOCKER_RUN_ARGS='--network test.app.gosh.sh' DOCKER_WEB_CONTAINER_NAME=${DOCKER_WEB_CONTAINER_NAME}
                        echo 'server_names_hash_bucket_size 1024;' > /opt/nginx/proxy.conf
                        echo 'server { listen 80 default_server; return 404;}' >> /opt/nginx/proxy.conf
                        docker ps | grep -o "gosh-web.*" | while read -r line ; do sed "s/GOSH_WEB_VERSION/\$line/g" ../.ci/nginx/proxy.conf.template >> /opt/nginx/proxy.conf; done
                        docker restart nginx-test-app-gosh-sh
                        """  
                    }   
                    archiveArtifacts artifacts: "${DOCKER_WEB_CONTAINER_NAME}.gosh.sh*"
                }
            }
        }
        stage('Web: wait to be available') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    timeout(15) {
                        waitUntil {
                            def r = sh script: "sleep 100 && curl -s --retry-connrefused --retry 100 --retry-delay 5 https://${DOCKER_WEB_CONTAINER_NAME}.gosh.sh > /dev/null", returnStatus: true
                            return r == 0
                        }  
                    }
                }
            }
        }
        stage('Tests: functional') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    if (!params.ONLYWEB) {
                        dir('tests') {
                            sh 'mkdir /home/jenkins/bin && cp -r ../git-remote-gosh/git-remote-gosh-amd64 /home/jenkins/bin/git-remote-gosh && chmod +x /home/jenkins/bin/git-remote-gosh'
                            def tests = sh(script: 'ls | grep "[0-9][0-9]-\\+"', returnStdout: true).trim().split('\n')
                            sh """
                                export PATH=/home/jenkins/.everdev/tonos-cli/:/home/jenkins/bin:$PATH
                                ./set-vars.sh
                            """
                            for (int i = 0; i < tests.length; i++) {
                                stage("Test ${tests[i]}") {
                                    sh """
                                        export PATH=/home/jenkins/.everdev/tonos-cli/:/home/jenkins/bin:$PATH
                                        . ./env.env
                                        ./${tests[i]}
                                    """
                                }
                            }
                        }
                        
                    }
                }
            }
        }
        stage('Tests: Web') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    dir('monitoring/gosh-mon') {   
                        sh "cp config/credentials.yml.template config/credentials.yml"
                        sh "docker build -t gosh-mon ."
                        def tests = sh(script: 'cat config/scripts/app.yml | cut -c 3-', returnStdout: true).trim().split('\n')
                        for (int i = 0; i < tests.length; i++) {
                            stage("Test ${tests[i]}") {
                            sh """
                                docker run --rm \
                                    -e GM_MODE="${tests[i]}" \
                                    -e RUN_NOW=1 \
                                    -e CONFIG_SEED="\$(tonos-cli -j genphrase | jq .phrase | tr -d '\"\n')" \
                                    -e CONFIG_APPURL=https://${DOCKER_WEB_CONTAINER_NAME}.gosh.sh/ \
                                    -v \$(pwd)/config:/home/node/app/config:ro \
                                    -v \$(pwd)/test-errors:/home/node/app/errors \
                                    gosh-mon
                            """
                            }
                        }
                    }   
                }
            }
            post {
                failure {
                    archiveArtifacts artifacts: "monitoring/gosh-mon/test-errors/*.log"
                    archiveArtifacts artifacts: "monitoring/gosh-mon/test-errors/*.png"
                }
            }
        }
        stage("Prerelease: Git Helper Snap"){
            agent {
                node {
                    label 'jenkins-main'
                }
            }
            steps {
                script {
                    if (!params.ONLYWEB && !params.DRYRUN) {
                        dir('git-remote-gosh') {
                        sh """
                            cp /var/jenkins_home/workspace/gosh-prepare-rc/git-remote-gosh/git-remote-gosh-amd64 snap/git-remote-gosh
                            sed -i 's/VERSION_PLACEHOLDER/${VERSION}/g' snap/snapcraft.yaml
                            chmod +x snap/git-remote-gosh
                            cd snap
                            tar -cvf git-remote-gosh.tar git-remote-gosh
                            snapcraft clean --use-lxd
                            snapcraft --use-lxd
                            snapcraft upload git-remote-gosh_${VERSION}_amd64.snap --release=candidate
                        """
                        }
                    }
                }
            }
        }
        stage('Prerelease: Git Helper - bin') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                script {
                    if (!params.ONLYWEB) {
                        archiveArtifacts artifacts: 'git-remote-gosh/git-remote-gosh-amd64'
                        archiveArtifacts artifacts: 'git-remote-gosh/git-remote-gosh-arm64'
                        if (!params.DRYRUN && !params.ONLYWEB) {
                            dir('.ci/scripts') {
                                withCredentials([string(credentialsId: 'github-gosh-release', variable: 'TOKEN')]) {
                                    sh './create-github-release.sh $TOKEN ${VERSION} ${BRANCH}'
                                    sh './github-upload-assets.sh $TOKEN ${VERSION} ../../git-remote-gosh/git-remote-gosh-amd64'
                                    sh './github-upload-assets.sh $TOKEN ${VERSION} ../../git-remote-gosh/git-remote-gosh-arm64'
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Prerelease: push rc Git Helper Docker image') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                retry(3) {
                    script {
                        if (!params.DRYRUN && !params.ONLYWEB) {
                            dir('git-remote-gosh') {
                                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'teamgosh-dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                                    sh 'docker login -u $USERNAME -p $PASSWORD'
                                }
                                sh "make publish FULL_IMAGE_NAME=teamgosh/git:rc-${VERSION} PLATFORM=linux/amd64,linux/arm64"
                            }
                        }
                    }
                }
            }
        }
        stage('Prerelease: push rc Docker Extension image') {
            agent {
                docker {
                    image 'jenkins-docker-agent:1'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -v /opt:/opt --group-add docker'
                }
            }
            steps {
                retry(3) {
                    script {
                        if (!params.DRYRUN && !params.ONLYWEB) {
                            dir('docker-extension') {
                                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'teamgosh-dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                                    sh 'docker login -u $USERNAME -p $PASSWORD'
                                }
                                sh "make build-ci IMAGE=teamgosh/docker-extension TAG=rc-${VERSION} PLATFORM=linux/amd64,linux/arm64 GOSH_GIT_IMAGE=localhost:5000/teamgosh/git:${VERSION}"
                            }
                        }
                    }
                }
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
    }
}
