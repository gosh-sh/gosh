variables:
- name: RUSTUP_TOOLCHAIN
  value: 1.70.0

trigger: none
pr: none

strategy:
  matrix:
    linux:
      imageName: ubuntu-20.04
      artifactNameAmd: linux-amd64
    mac:
      imageName: macOS-12
      artifactNameAmd: darwin-amd64
    windows:
      imageName: windows-2019
      artifactNameAmd: windows-amd64
  maxParallel: 3

pool:
  vmImage: $(imageName)

steps:
############################################################
# Check version
- bash: |
    if [[ "$(versionNo)" == *"/"* ]]; then
      VERSION=$(echo "$(versionNo)" | cut -d '/' -f 2 | sed "s/\./_/g")
    else
      PREFIX=$(echo "$(versionNo)" | tr -d '_x')
      VERSION="${PREFIX}_0_0"
    fi
    echo "##vso[task.setvariable variable=VERSION]$VERSION"
  displayName: Get supported_contract_version

  # Check version
- bash: |
    echo $(VERSION)
    echo "$(versionNo)/git-remote-gosh/target/aarch64-unknown-linux-gnu/release/git-remote-gosh_$(VERSION)"
  displayName: Check version

##################################################
# Pre-requirements
# Linux
- script: |
    set -ex
    sudo apt install -y protobuf-compiler
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Install pre-requirements Linux
# Mac
- script: |
    brew install protobuf openssl cmake llvm
  condition: and(eq(variables['Agent.OS'], 'Darwin'), eq(variables['DRYRUN'], 'false'))
  displayName: Install pre-requirements MacOS
# Windows
- script: |
    choco install protoc
  condition: and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['DRYRUN'], 'false'))
  displayName: Install pre-requirements Windows

######################################################
# Rust setup
# Linux and macOS
- script: |
    set -ex
    curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
    echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
  env:
    RUSTUP_TOOLCHAIN: ${{ variables.RUSTUP_TOOLCHAIN }}
  displayName: "Install rust (*nix)"
  condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
# Windows
- script: |
    curl -sSf -o rustup-init.exe https://win.rustup.rs
    rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
    set PATH=%PATH%;%USERPROFILE%\.cargo\bin
    echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
  env:
    RUSTUP_TOOLCHAIN: ${{ variables.RUSTUP_TOOLCHAIN }}
  displayName: "Install rust (windows)"
  condition: and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['DRYRUN'], 'false'))

################################################### 
# Build
- bash: |
    set -ex
    mkdir -p ./resources
    cp ../contracts/gosh/*.abi.json ./resources/
  workingDirectory: $(versionNo)/git-remote-gosh
  displayName: Prepare resources
   
# Linux
- script: |
    set -ex
    sudo apt update -y
    cargo build --release
  workingDirectory: $(versionNo)/git-remote-gosh
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Build Linux amd64

- script: |
    set -ex
    sudo apt update -y
    sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
    sudo apt install -y clang build-essential g++-x86-64-linux-gnu libc6-dev-amd64-cross g++-aarch64-linux-gnu libc6-dev-arm64-cross gcc-aarch64-linux-gnu
    rustup target add aarch64-unknown-linux-gnu
    cargo build --release --target aarch64-unknown-linux-gnu
  env:
    CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: x86_64-linux-gnu-gcc
    CC_x86_64_unknown_linux_gnu: x86_64-linux-gnu-gcc
    CXX_x86_64_unknown_linux_gnu: x86_64-linux-gnu-g++
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
    CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
    CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
    BINDGEN_EXTRA_CLANG_ARGS": '--sysroot /usr/arm-linux-gnueabi'
  workingDirectory: $(versionNo)/git-remote-gosh
  condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['DRYRUN'], 'false'))
  displayName: Build Linux arm64
# Mac
- script: |
    set -ex
    cargo build --release
    rustup target add aarch64-apple-darwin
    cargo build --release --target aarch64-apple-darwin
  workingDirectory: $(versionNo)/git-remote-gosh
  condition: and(eq(variables['Agent.OS'], 'Darwin'), eq(variables['DRYRUN'], 'false'))
  displayName: Build MacOS
# Windows
- script: |
    cargo build --release
  workingDirectory: $(versionNo)/git-remote-gosh
  condition: and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['DRYRUN'], 'false'))
  displayName: Build Windows

# ############################################################
# Set Version
# Linux and macOS amd64
# - bash: |
#     mv git-remote-gosh_unknown git-remote-gosh_v$(VERSION)
#   workingDirectory: $(versionNo)/git-remote-gosh/target/release
#   displayName: Name binaries Linux and macOS amd64
#   condition: not(eq(variables['Agent.OS'], 'Windows_NT'))

# Linux arm64
# - bash: |
#     mv git-remote-gosh_unknown git-remote-gosh_v$(VERSION)
#   workingDirectory: $(versionNo)/git-remote-gosh/target/aarch64-unknown-linux-gnu/release
#   displayName: Name binaries Linux arm64
#   condition: eq(variables['Agent.OS'], 'Linux')

# MacOS arm64
# - bash: |
#     mv git-remote-gosh_unknown git-remote-gosh_v$(VERSION)
#   workingDirectory: $(versionNo)/git-remote-gosh/target/aarch64-apple-darwin/release
#   displayName: Name binaries MacOS arm64
#   condition: eq(variables['Agent.OS'], 'Darwin')

# Windows
# - bash: |
#     mv git-remote-gosh_unknown.exe git-remote-gosh_v$(VERSION).exe
#   workingDirectory: $(versionNo)/git-remote-gosh/target/release
#   displayName: Name binaries Windows
#   condition: eq(variables['Agent.OS'], 'Windows_NT')

###########################################################
# Publish
# Linux and macOS amd64
- publish: ./$(versionNo)/git-remote-gosh/target/release/git-remote-gosh_$(VERSION)
  artifact: $(artifactNameAmd)
  condition: eq(variables['Agent.OS'], 'Linux')
  displayName: Publish amd64 Linux

- publish: ./$(versionNo)/git-remote-gosh/target/release/git-remote-gosh_$(VERSION)
  artifact: $(artifactNameAmd)
  condition: and(eq(variables['Agent.OS'], 'Darwin'), eq(variables['DRYRUN'], 'false'))
  displayName: Publish amd64 macOS

# Windows amd64
- publish: ./$(versionNo)/git-remote-gosh/target/release/git-remote-gosh_$(VERSION).exe
  artifact: $(artifactNameAmd)
  condition: and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['DRYRUN'], 'false'))
  displayName: Publish amd64 Windows

# Linux arm64
- publish: ./$(versionNo)/git-remote-gosh/target/aarch64-unknown-linux-gnu/release/git-remote-gosh_$(VERSION)
  artifact: linux-arm64
  condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['DRYRUN'], 'false'))
  displayName: Publish arm64 Linux

# MacOS arm64
- publish: ./$(versionNo)/git-remote-gosh/target/aarch64-apple-darwin/release/git-remote-gosh_$(VERSION)
  artifact: darwin-arm64
  condition: and(eq(variables['Agent.OS'], 'Darwin'), eq(variables['DRYRUN'], 'false'))
  displayName: Publish arm64 MacOS