variables:
- name: RUSTUP_TOOLCHAIN
  value: 1.66.0 

trigger: none

strategy:
  matrix:
    linux:
      imageName: ubuntu-20.04
      binName: git-remote-gosh
      artifactNameAmd: linux-amd64
    mac:
      imageName: macOS-12
      binName: git-remote-gosh
      artifactNameAmd: linux-amd64
    windows:
      imageName: windows-2019
      binName: git-remote-gosh.exe
      artifactNameAmd: linux-amd64
  maxParallel: 3

pool:
  vmImage: $(imageName)

steps:
#######################################################
# Pre-requirements
# Linux
- script: |
    sudo apt install -y protobuf-compiler
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Install pre-requirements Linux
# Mac
- script: |
    brew install protobuf
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Install pre-requirements MacOS
# Windows
- script: |
    choco install protoc
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install pre-requirements Windows

###########################################################
# Rust setup
# Linux and macOS
- script: |
    set -e
    curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
    echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
  env:
    RUSTUP_TOOLCHAIN: ${{ variables.RUSTUP_TOOLCHAIN }}
  displayName: "Install rust (*nix)"
  condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
# Windows
- script: |
    curl -sSf -o rustup-init.exe https://win.rustup.rs
    rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
    set PATH=%PATH%;%USERPROFILE%\.cargo\bin
    echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
  env:
    RUSTUP_TOOLCHAIN: ${{ variables.RUSTUP_TOOLCHAIN }}
  displayName: "Install rust (windows)"
  condition: eq(variables['Agent.OS'], 'Windows_NT')

##########################################################
# Build
# Linux
 - script: |
     cargo build --release
     sudo apt install -y build-essential g++-x86-64-linux-gnu libc6-dev-amd64-cross g++-aarch64-linux-gnu libc6-dev-arm64-cross
     rustup target add aarch64-unknown-linux-gnu
     cargo build --release --target aarch64-unknown-linux-gnu
   env:
     CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: x86_64-linux-gnu-gcc
     CC_x86_64_unknown_linux_gnu: x86_64-linux-gnu-gcc
     CXX_x86_64_unknown_linux_gnu: x86_64-linux-gnu-g++
     CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
     CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
     CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
   workingDirectory: gosh-dispatcher
   condition: eq( variables['Agent.OS'], 'Linux' )
   displayName: Build Linux 
# Mac
- script: |
    #cargo build --release
    rustup target add aarch64-apple-darwin
    cargo build --release --target aarch64-apple-darwin
  workingDirectory: gosh-dispatcher
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Build MacOS
# Windows
- script: |
    cargo build --release
  workingDirectory: gosh-dispatcher
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Build Windows

##################################
# Publish 
# Linux, MacOs and Windows amd64 
- publish: ./gosh-dispatcher/target/release/$(binName)
  artifact: $(artifactNameAmd)
  displayName: Publish amd64

# Linux arm64
- publish: ./gosh-dispatcher/target/aarch64-unknown-linux-gnu/$(binName)
  artifact: linux-arm64
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Publish arm64 Linux

# MacOS arm64
- publish: ./gosh-dispatcher/target/aarch64-apple-darwin/$(binName)
  artifact: darwin-arm64
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Publish arm64 MacOS