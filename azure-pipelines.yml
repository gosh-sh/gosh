variables:
- name: RUSTUP_TOOLCHAIN
  value: 1.66.0 

trigger: none

strategy:
  matrix:
    linux:
      imageName: ubuntu-20.04
      binName: git-remote-gosh-linux-amd64
    mac:
      imageName: macOS-12
      binName: git-remote-gosh-darwin-amd64
    windows:
      imageName: windows-2019
      binName: git-remote-gosh-windows-amd64
  maxParallel: 3

pool:
  vmImage: $(imageName)

steps:
# Pre-requirements
# Linux
- script: |
    sudo apt install -y protobuf-compiler
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Install pre-requirements Linux
# Mac
- script: |
    brew install protobuf
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Install pre-requirements MacOS
# Windows
- script: |
    choco install protoc
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install pre-requirements Windows

# Rust setup
# Linux and macOS.
- script: |
    set -e
    curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain $RUSTUP_TOOLCHAIN
    echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
  env:
    RUSTUP_TOOLCHAIN: ${{ variables.RUSTUP_TOOLCHAIN }}
  displayName: "Install rust (*nix)"
  condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
# Windows.
- script: |
    curl -sSf -o rustup-init.exe https://win.rustup.rs
    rustup-init.exe -y --profile minimal --default-toolchain %RUSTUP_TOOLCHAIN% --default-host x86_64-pc-windows-msvc
    set PATH=%PATH%;%USERPROFILE%\.cargo\bin
    echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
  env:
    RUSTUP_TOOLCHAIN: ${{ variables.RUSTUP_TOOLCHAIN }}
  displayName: "Install rust (windows)"
  condition: eq(variables['Agent.OS'], 'Windows_NT')

# Set correct toolchain
- bash: |
    rustup default $RUSTUP_TOOLCHAIN
    rustup update $RUSTUP_TOOLCHAIN
  env:
    RUSTUP_TOOLCHAIN: ${{ variables.RUSTUP_TOOLCHAIN }}
  displayName: "Set correct Rust version"
  
# Build
- bash: |
    mkdir -p ./resources
    cp ../contracts/gosh/*.abi.json ./resources/
  workingDirectory: git-remote-gosh
  displayName: Prepare
  
- script: |
    cargo build --release
    ls
    ls target
    ls release
  workingDirectory: git-remote-gosh
  displayName: Build

# Publish
- publish: ./git-remote-gosh/target/release/git-remote-gosh
  artifact: $(binName)