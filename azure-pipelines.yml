trigger:
- azure-pipelines

strategy:
  matrix:
#    linux:
#      imageName: "ubuntu-20.04"
#    mac:
#      imageName: "macOS-12"
    windows:
      imageName: "windows-2019"
  maxParallel: 3

pool:
  vmImage: $(imageName)

steps:
# Linux
- bash: |
    sudo apt install -y protobuf-compiler
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Install pre-requirements
# Mac
- bash: |
    brew install protobuf
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: Install pre-requirements
# Windows
- bash: |
    choco install protoc openssl
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install pre-requirements

# Linux and macOS.
- script: |
    set -e
    curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain $RUSTUP_TOOLCHAIN
    echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
  env:
    RUSTUP_TOOLCHAIN: 1.66.0
  displayName: "Install rust (*nix)"
  condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
# Windows.
- script: |
    curl -sSf -o rustup-init.exe https://win.rustup.rs
    rustup-init.exe -y --profile minimal --default-toolchain %RUSTUP_TOOLCHAIN% --default-host x86_64-pc-windows-msvc
    set PATH=%PATH%;%USERPROFILE%\.cargo\bin
    echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
  env:
    RUSTUP_TOOLCHAIN: 1.66.0
  displayName: "Install rust (windows)"
  condition: eq(variables['Agent.OS'], 'Windows_NT')

# Set correct toolchain
- bash: |
    rustup default $RUSTUP_TOOLCHAIN
    rustup update $RUSTUP_TOOLCHAIN
  env:
    RUSTUP_TOOLCHAIN: 1.66.0
  displayName: "Set correct Rust version"
  
- bash: |
    mkdir -p ./resources
    cp ../contracts/gosh/*.abi.json ./resources/
    cargo build --release
  workingDirectory: git-remote-gosh
  displayName: Build